import numpy
import time
import sys
import json
import GeoPictureSerializer


def radianceCorrection(geoPicture):


    #create a list of bands array
    presentBands = geoPicture.bands

    #create a numerical vector corresponding to bands present
    presentBandsNum = numpy.zeros(len(presentBands), dtype=numpy.uint8)
    for i in numpy.arange(len(presentBands)):
        presentBandsNum[i] = int( presentBands[i].lstrip('B') )

    #load metadata
    l1t = json.loads(geoPicture.metadata["L1T"])

    if l1t["PRODUCT_METADATA"]["SENSOR_ID"] == "HYPERION":
        geoPicture.picture = hypEsun(geoPicture.picture, presentBandsNum)
        #geoPicture.picture, presentBands = binBands(geoPicture.picture, presentBandsNum)

        #create new presentBandsNum vector
        presentBandsNum = numpy.zeros(len(presentBands), dtype=numpy.uint8)
        for i in numpy.arange(len(presentBands)):
            presentBandsNum[i] = int( presentBands[i].lstrip('B') )

    else:
        geoPicture.picture = rescaleALI(l1t, geoPicture.picture, presentBandsNum)
        geoPicture.picture = aliEsun(geoPicture.picture, presentBandsNum)

    #geometric correction
    geoPicture.picture = geometricCorrection(geoPicture.picture, l1t)

    return geoPicture

def bandList():
    Band_List = [['B011','B012','B013','B014','B015','B016'],
                ['B009','B010'],
                ['B018','B019','B020','B021','B022','B023','B024','B025'],
                ['B028','B029','B030','B031','B032','B033'],
                ['B042','B043','B044','B045'],
                ['B049','B050','B051','B052','B053'],
                ['B106','B107','B108','B109','B110','B111','B112','B113','B114','B115'],
                ['B141','B142','B143','B144','B145','B146','B147','B148','B149','B150',
                 'B151','B152','B153','B154','B155','B156','B157','B158','B159','B160'],
                ['B193','B194','B195','B196','B197','B198','B199','B200','B201','B202',
                 'B203','B204','B205','B206','B207','B208','B209','B210','B211','B212',
                             'B213','B214','B215','B216','B217','B218','B219']]

    return Band_List


def commonBand(geoPicture, Band_List):

    Bands_Present = []
    Final_Band_List=[]
    for i in numpy.arange(len(Band_List)):
        Final_Band_List.append(list(set(Band_List[i])&set(geoPicture.bands)))
        if list(set(Band_List[i])&set(geoPicture.bands)):
            Bands_Present.append("B" + str("%02d" % (i+2)))

    return Final_Band_List, Bands_Present

def bandSynth(geoPicture, Band_List, Weight_List):

    imgArray = numpy.zeros((geoPicture.picture.shape[0],geoPicture.picture.shape[1],len(Band_List)))

    if Weight_List==[]:
        print 'using band average weighting'
        Band_Weight_List = bandWeightList(Band_List)
    else:
        Band_Weight_List = Weight_List

    synthBands = []
    for band in Band_List:
       for elmnt in band:
           imgArray[:,:,Band_List.index(band)] = imgArray[:,:,Band_List.index(band)] + geoPicture.picture[:,:,geoPicture.bands.index(elmnt)]*Band_Weight_List[Band_List.index(band)][band.index(elmnt)]

    return imgArray

def bandWeightList(Band_List):

    Band_Weight_List = []
    for band in Band_List:
        innerBandWeightList=[]
        for elmnt in band:
            innerBandWeightList.append( 1./len(band) )
        Band_Weight_List.append(innerBandWeightList)

    return Band_Weight_List


def rescaleALI(metaData, imgArray, availableBandsNum):

    #Rescale ALI image data
    radianceScaling = metaData['RADIANCE_SCALING']
    bandScaling = numpy.zeros((1,1,availableBandsNum.size))
    bandOffset = numpy.zeros((1,1,availableBandsNum.size))

    for i in numpy.arange(availableBandsNum.size):
        bandScaling[0,0,i] = float(radianceScaling['BAND' + str(availableBandsNum[i]) + '_SCALING_FACTOR'])
        bandOffset[0,0,i] = float(radianceScaling['BAND' + str(availableBandsNum[i]) + '_OFFSET'])

    #scaling and offset
    if (numpy.around(imgArray*300.)-(imgArray*300.)).sum() < 1e-4:
        imgArray = imgArray*300./30.
    return (imgArray * 30. * bandScaling) + bandOffset

def geometricCorrection(imgArray, metaData):
    earthSunDistance = numpy.array([[1,.9832], [15,.9836], [32,.9853], [46,.9878], [60,.9909],
                                    [74, .9945], [91, .9993], [106, 1.0033], [121, 1.0076], [135, 1.0109],
                                    [152, 1.0140], [166, 1.0158], [182, 1.0167], [196, 1.0165], [213, 1.0149],
                                    [227, 1.0128], [242, 1.0092], [258, 1.0057], [274, 1.0011], [288, .9972],
                                    [305, .9925], [319, .9892], [335, .9860], [349, .9843], [365, .9833],[366, .9832375]])
    
    julianDate = time.strptime(metaData["PRODUCT_METADATA"]["START_TIME"], "%Y %j %H:%M:%S").tm_yday
    eSD = numpy.interp( numpy.linspace(1,366,366), earthSunDistance[:,0], earthSunDistance[:,1] )
    esDist = eSD[julianDate-1]
    
    sunAngle = float(metaData["PRODUCT_PARAMETERS"]["SUN_ELEVATION"])
    sunAngle = sunAngle*numpy.pi/180.
    imgArray= numpy.pi * esDist**2 * imgArray / numpy.sin(sunAngle)
    return imgArray


def aliEsun(imgArray, availableBandsNum):
    Esun_ali = numpy.array([ [2,1851.8], [3, 1967.6], [4, 1837.2], [5,1551.47], [6, 1164.53], [7,957.46], [8, 451.37], [9, 230.03], [10, 79.61] ])
    imgArray= imgArray / numpy.reshape(Esun_ali[availableBandsNum-2,1],(1,1,availableBandsNum.size))
    return imgArray

def hypEsun(imgArray, availableBandsNum):
    Esun_hyp = numpy.array([
        [  1.00000000e+00,   9.49370000e+02],
        [  2.00000000e+00,   1.15878000e+03],
        [  3.00000000e+00,   1.06125000e+03],
        [  4.00000000e+00,   9.55120000e+02],
        [  5.00000000e+00,   9.70870000e+02],
        [  6.00000000e+00,   1.66373000e+03],
        [  7.00000000e+00,   1.72292000e+03],
        [  8.00000000e+00,   1.65052000e+03],
        [  9.00000000e+00,   1.71490000e+03],
        [  1.00000000e+01,   1.99452000e+03],
        [  1.10000000e+01,   2.03472000e+03],
        [  1.20000000e+01,   1.97012000e+03],
        [  1.30000000e+01,   2.03622000e+03],
        [  1.40000000e+01,   1.86024000e+03],
        [  1.50000000e+01,   1.95329000e+03],
        [  1.60000000e+01,   1.95355000e+03],
        [  1.70000000e+01,   1.80456000e+03],
        [  1.80000000e+01,   1.90551000e+03],
        [  1.90000000e+01,   1.87750000e+03],
        [  2.00000000e+01,   1.88351000e+03],
        [  2.10000000e+01,   1.82199000e+03],
        [  2.20000000e+01,   1.84192000e+03],
        [  2.30000000e+01,   1.84751000e+03],
        [  2.40000000e+01,   1.77999000e+03],
        [  2.50000000e+01,   1.76145000e+03],
        [  2.60000000e+01,   1.74080000e+03],
        [  2.70000000e+01,   1.70888000e+03],
        [  2.80000000e+01,   1.67209000e+03],
        [  2.90000000e+01,   1.63283000e+03],
        [  3.00000000e+01,   1.59192000e+03],
        [  3.10000000e+01,   1.55766000e+03],
        [  3.20000000e+01,   1.52541000e+03],
        [  3.30000000e+01,   1.47093000e+03],
        [  3.40000000e+01,   1.45037000e+03],
        [  3.50000000e+01,   1.39318000e+03],
        [  3.60000000e+01,   1.37275000e+03],
        [  3.70000000e+01,   1.23563000e+03],
        [  3.80000000e+01,   1.26613000e+03],
        [  3.90000000e+01,   1.27902000e+03],
        [  4.00000000e+01,   1.26522000e+03],
        [  4.10000000e+01,   1.23537000e+03],
        [  4.20000000e+01,   1.20229000e+03],
        [  4.30000000e+01,   1.19408000e+03],
        [  4.40000000e+01,   1.14360000e+03],
        [  4.50000000e+01,   1.12816000e+03],
        [  4.60000000e+01,   1.10848000e+03],
        [  4.70000000e+01,   1.06850000e+03],
        [  4.80000000e+01,   1.03970000e+03],
        [  4.90000000e+01,   1.02384000e+03],
        [  5.00000000e+01,   9.38960000e+02],
        [  5.10000000e+01,   9.49970000e+02],
        [  5.20000000e+01,   9.49740000e+02],
        [  5.30000000e+01,   9.29540000e+02],
        [  5.40000000e+01,   9.17320000e+02],
        [  5.50000000e+01,   8.92690000e+02],
        [  5.60000000e+01,   8.77590000e+02],
        [  5.70000000e+01,   8.34600000e+02],
        [  5.80000000e+01,   8.37110000e+02],
        [  5.90000000e+01,   8.14700000e+02],
        [  6.00000000e+01,   7.88040000e+02],
        [  6.10000000e+01,   7.78200000e+02],
        [  6.20000000e+01,   7.64290000e+02],
        [  6.30000000e+01,   7.51280000e+02],
        [  6.40000000e+01,   7.40250000e+02],
        [  6.50000000e+01,   7.10540000e+02],
        [  6.60000000e+01,   7.03560000e+02],
        [  6.70000000e+01,   6.95100000e+02],
        [  6.80000000e+01,   6.76900000e+02],
        [  6.90000000e+01,   6.61900000e+02],
        [  7.00000000e+01,   6.49640000e+02],
        [  7.10000000e+01,   9.64600000e+02],
        [  7.20000000e+01,   9.82060000e+02],
        [  7.30000000e+01,   9.54030000e+02],
        [  7.40000000e+01,   9.31810000e+02],
        [  7.50000000e+01,   9.23350000e+02],
        [  7.60000000e+01,   8.94620000e+02],
        [  7.70000000e+01,   8.76100000e+02],
        [  7.80000000e+01,   8.39340000e+02],
        [  7.90000000e+01,   8.41540000e+02],
        [  8.00000000e+01,   8.10200000e+02],
        [  8.10000000e+01,   8.02220000e+02],
        [  8.20000000e+01,   7.84440000e+02],
        [  8.30000000e+01,   7.72220000e+02],
        [  8.40000000e+01,   7.58600000e+02],
        [  8.50000000e+01,   7.43880000e+02],
        [  8.60000000e+01,   7.21760000e+02],
        [  8.70000000e+01,   7.14260000e+02],
        [  8.80000000e+01,   6.98690000e+02],
        [  8.90000000e+01,   6.82410000e+02],
        [  9.00000000e+01,   6.69610000e+02],
        [  9.10000000e+01,   6.57860000e+02],
        [  9.20000000e+01,   6.43480000e+02],
        [  9.30000000e+01,   6.23130000e+02],
        [  9.40000000e+01,   6.03890000e+02],
        [  9.50000000e+01,   5.82630000e+02],
        [  9.60000000e+01,   5.79580000e+02],
        [  9.70000000e+01,   5.71800000e+02],
        [  9.80000000e+01,   5.62300000e+02],
        [  9.90000000e+01,   5.51400000e+02],
        [  1.00000000e+02,   5.40520000e+02],
        [  1.01000000e+02,   5.34170000e+02],
        [  1.02000000e+02,   5.19740000e+02],
        [  1.03000000e+02,   5.11290000e+02],
        [  1.04000000e+02,   4.97280000e+02],
        [  1.05000000e+02,   4.92820000e+02],
        [  1.06000000e+02,   4.79410000e+02],
        [  1.07000000e+02,   4.79560000e+02],
        [  1.08000000e+02,   4.69010000e+02],
        [  1.09000000e+02,   4.61600000e+02],
        [  1.10000000e+02,   4.51000000e+02],
        [  1.11000000e+02,   4.44060000e+02],
        [  1.12000000e+02,   4.35250000e+02],
        [  1.13000000e+02,   4.29290000e+02],
        [  1.14000000e+02,   4.15690000e+02],
        [  1.15000000e+02,   4.12870000e+02],
        [  1.16000000e+02,   4.05400000e+02],
        [  1.17000000e+02,   3.96940000e+02],
        [  1.18000000e+02,   3.91940000e+02],
        [  1.19000000e+02,   3.86790000e+02],
        [  1.20000000e+02,   3.80650000e+02],
        [  1.21000000e+02,   3.70960000e+02],
        [  1.22000000e+02,   3.65570000e+02],
        [  1.23000000e+02,   3.58420000e+02],
        [  1.24000000e+02,   3.55180000e+02],
        [  1.25000000e+02,   3.49040000e+02],
        [  1.26000000e+02,   3.42100000e+02],
        [  1.27000000e+02,   3.36000000e+02],
        [  1.28000000e+02,   3.25940000e+02],
        [  1.29000000e+02,   3.25710000e+02],
        [  1.30000000e+02,   3.18270000e+02],
        [  1.31000000e+02,   3.12120000e+02],
        [  1.32000000e+02,   3.08080000e+02],
        [  1.33000000e+02,   3.00520000e+02],
        [  1.34000000e+02,   2.92270000e+02],
        [  1.35000000e+02,   2.93280000e+02],
        [  1.36000000e+02,   2.82140000e+02],
        [  1.37000000e+02,   2.85600000e+02],
        [  1.38000000e+02,   2.80410000e+02],
        [  1.39000000e+02,   2.75870000e+02],
        [  1.40000000e+02,   2.71970000e+02],
        [  1.41000000e+02,   2.65730000e+02],
        [  1.42000000e+02,   2.60200000e+02],
        [  1.43000000e+02,   2.51620000e+02],
        [  1.44000000e+02,   2.44110000e+02],
        [  1.45000000e+02,   2.47830000e+02],
        [  1.46000000e+02,   2.42850000e+02],
        [  1.47000000e+02,   2.38150000e+02],
        [  1.48000000e+02,   2.39290000e+02],
        [  1.49000000e+02,   2.27380000e+02],
        [  1.50000000e+02,   2.26690000e+02],
        [  1.51000000e+02,   2.25480000e+02],
        [  1.52000000e+02,   2.18690000e+02],
        [  1.53000000e+02,   2.09070000e+02],
        [  1.54000000e+02,   2.10620000e+02],
        [  1.55000000e+02,   2.06980000e+02],
        [  1.56000000e+02,   2.01590000e+02],
        [  1.57000000e+02,   1.98090000e+02],
        [  1.58000000e+02,   1.91770000e+02],
        [  1.59000000e+02,   1.84020000e+02],
        [  1.60000000e+02,   1.84910000e+02],
        [  1.61000000e+02,   1.82750000e+02],
        [  1.62000000e+02,   1.80090000e+02],
        [  1.63000000e+02,   1.75180000e+02],
        [  1.64000000e+02,   1.73000000e+02],
        [  1.65000000e+02,   1.68870000e+02],
        [  1.66000000e+02,   1.65190000e+02],
        [  1.67000000e+02,   1.56300000e+02],
        [  1.68000000e+02,   1.59010000e+02],
        [  1.69000000e+02,   1.55220000e+02],
        [  1.70000000e+02,   1.52620000e+02],
        [  1.71000000e+02,   1.49140000e+02],
        [  1.72000000e+02,   1.41630000e+02],
        [  1.73000000e+02,   1.39430000e+02],
        [  1.74000000e+02,   1.39220000e+02],
        [  1.75000000e+02,   1.37970000e+02],
        [  1.76000000e+02,   1.36730000e+02],
        [  1.77000000e+02,   1.33960000e+02],
        [  1.78000000e+02,   1.30290000e+02],
        [  1.79000000e+02,   1.24500000e+02],
        [  1.80000000e+02,   1.24750000e+02],
        [  1.81000000e+02,   1.23920000e+02],
        [  1.82000000e+02,   1.21950000e+02],
        [  1.83000000e+02,   1.18960000e+02],
        [  1.84000000e+02,   1.17780000e+02],
        [  1.85000000e+02,   1.15560000e+02],
        [  1.86000000e+02,   1.14520000e+02],
        [  1.87000000e+02,   1.11650000e+02],
        [  1.88000000e+02,   1.09210000e+02],
        [  1.89000000e+02,   1.07690000e+02],
        [  1.90000000e+02,   1.06130000e+02],
        [  1.91000000e+02,   1.03700000e+02],
        [  1.92000000e+02,   1.02420000e+02],
        [  1.93000000e+02,   1.00420000e+02],
        [  1.94000000e+02,   9.82700000e+01],
        [  1.95000000e+02,   9.73700000e+01],
        [  1.96000000e+02,   9.54400000e+01],
        [  1.97000000e+02,   9.35500000e+01],
        [  1.98000000e+02,   9.23500000e+01],
        [  1.99000000e+02,   9.09300000e+01],
        [  2.00000000e+02,   8.93700000e+01],
        [  2.01000000e+02,   8.46400000e+01],
        [  2.02000000e+02,   8.54700000e+01],
        [  2.03000000e+02,   8.44900000e+01],
        [  2.04000000e+02,   8.34300000e+01],
        [  2.05000000e+02,   8.16200000e+01],
        [  2.06000000e+02,   8.06700000e+01],
        [  2.07000000e+02,   7.93200000e+01],
        [  2.08000000e+02,   7.81100000e+01],
        [  2.09000000e+02,   7.66900000e+01],
        [  2.10000000e+02,   7.53500000e+01],
        [  2.11000000e+02,   7.41500000e+01],
        [  2.12000000e+02,   7.32500000e+01],
        [  2.13000000e+02,   7.16700000e+01],
        [  2.14000000e+02,   7.01300000e+01],
        [  2.15000000e+02,   6.95200000e+01],
        [  2.16000000e+02,   6.82800000e+01],
        [  2.17000000e+02,   6.63900000e+01],
        [  2.18000000e+02,   6.57600000e+01],
        [  2.19000000e+02,   6.52300000e+01],
        [  2.20000000e+02,   6.30900000e+01],
        [  2.21000000e+02,   6.29000000e+01],
        [  2.22000000e+02,   6.16800000e+01],
        [  2.23000000e+02,   6.00000000e+01],
        [  2.24000000e+02,   5.99400000e+01],
        [  2.25000000e+02,   5.91800000e+01],
        [  2.26000000e+02,   5.73800000e+01],
        [  2.27000000e+02,   5.71000000e+01],
        [  2.28000000e+02,   5.62500000e+01],
        [  2.29000000e+02,   5.50900000e+01],
        [  2.30000000e+02,   5.40200000e+01],
        [  2.31000000e+02,   5.37500000e+01],
        [  2.32000000e+02,   5.27800000e+01],
        [  2.33000000e+02,   5.16000000e+01],
        [  2.34000000e+02,   5.14400000e+01],
        [  2.35000000e+02,   0.00000000e+00],
        [  2.36000000e+02,   0.00000000e+00],
        [  2.37000000e+02,   0.00000000e+00],
        [  2.38000000e+02,   0.00000000e+00],
        [  2.39000000e+02,   0.00000000e+00],
        [  2.40000000e+02,   0.00000000e+00],
        [  2.41000000e+02,   0.00000000e+00],
        [  2.42000000e+02,   0.00000000e+00]])
    Esun_hyp = Esun_hyp[availableBandsNum,1]
    imgArray= imgArray / numpy.reshape(Esun_hyp,(1,1,Esun_hyp.shape[0]))
    return imgArray
